datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client" // Pastikan path output ini sesuai dengan proyek Anda
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  role                UserRole      @default(VISITOR) // Enum untuk role, termasuk kelas siswa
  courses             CourseMembership[]
  posts               Post[]
  comments            Comment[]
  submissions         Submission[]
  assignmentsAuthored Assignment[]  @relation("AssignmentAuthor") // Relasi ke Assignment yang dibuat
  materialsAuthored   Material[]    @relation("MaterialAuthor")   // Relasi ke Material yang dibuat
}

enum UserRole {
  VISITOR
  TKJ1
  TKJ2
  TKJ3
  INSTRUCTOR
}

model Course {
  id            String        @id @default(cuid())
  name          String
  description   String?
  courseCode    String?       @unique // Kode unik untuk join kelas
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  members       CourseMembership[]
  materials     Material[]
  assignments   Assignment[]
  posts         Post[]        // Post forum khusus kelas ini
}

// Tabel penghubung User dan Course (Many-to-Many)
model CourseMembership {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  role       UserRole // Peran user di kelas ini (bisa INSTRUCTOR atau role kelas siswa)
  joinedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Pastikan user hanya join sekali per kelas
}

model Material {
  id            String    @id @default(cuid())
  title         String
  description   String?
  files         Json?     // Bisa menyimpan array URL/path file
  targetKelas   UserRole? // BARU: Target kelas spesifik, menggunakan enum UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  authorId      String    // BARU: ID dari User (Instruktur) yang membuat materi
  author        User      @relation("MaterialAuthor", fields: [authorId], references: [id], onDelete: Cascade) // BARU: Relasi ke User
}

model Assignment {
  id            String    @id @default(cuid())
  title         String
  description   String?
  dueDate       DateTime  // DIUBAH: Menjadi wajib (tidak ada '?')
  points        Int?      // Poin maksimal (opsional)
  files         Json?     // File soal/lampiran (sudah ada)
  targetKelas   UserRole? // BARU: Target kelas spesifik, menggunakan enum UserRole

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  authorId      String    // BARU: ID dari User (Instruktur) yang membuat assignment
  author        User      @relation("AssignmentAuthor", fields: [authorId], references: [id], onDelete: Cascade) // BARU: Relasi ke User

  submissions   Submission[]
}

model Submission {
  id            String    @id @default(cuid())
  submittedAt   DateTime  @default(now())
  files         Json?     // File jawaban yang diupload
  textContent   String?   // Jawaban berupa teks
  grade         Int?      // Nilai
  feedback      String?   // Feedback dari instruktur

  assignmentId  String
  studentId     String
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student       User       @relation(fields: [studentId], references: [id], onDelete: Cascade) // Relasi ke User (siswa)

  @@unique([assignmentId, studentId]) // Satu siswa hanya bisa submit sekali per tugas
}

model Post {
  id          String    @id @default(cuid())
  title       String?   // Judul post forum (opsional)
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  courseId    String
  authorId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  postId      String
  authorId    String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// Model bawaan NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}