generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String             @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole           @default(VISITOR)
  accounts            Account[]
  assignmentsAuthored Assignment[]       @relation("AssignmentAuthor")
  comments            Comment[]
  courses             CourseMembership[]
  materialsAuthored   Material[]         @relation("MaterialAuthor")
  posts               Post[]
  sessions            Session[]
  submissions         Submission[]
}

model Course {
  id          String             @id @default(cuid())
  name        String
  description String?
  courseCode  String?            @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignments Assignment[]
  members     CourseMembership[]
  materials   Material[]
  posts       Post[]
}

model CourseMembership {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  role     UserRole
  joinedAt DateTime @default(now())
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Material {
  id          String    @id @default(cuid())
  title       String
  description String?
  files       Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courseId    String
  authorId    String
  targetKelas UserRole?
  author      User      @relation("MaterialAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  points      Int?
  files       Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseId    String
  authorId    String
  targetKelas UserRole?
  author      User         @relation("AssignmentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  submittedAt  DateTime   @default(now())
  files        Json?
  textContent  String?
  grade        Int?
  feedback     String?
  assignmentId String
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
}

model Post {
  id        String    @id @default(cuid())
  title     String?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courseId  String
  authorId  String
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  VISITOR
  TKJ1
  TKJ2
  TKJ3
  INSTRUCTOR
}
