// schema.prisma

datasource db {
  provider = "postgresql" // atau "mysql", "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole           @default(VISITOR)
  courses       CourseMembership[]
  posts         Post[]
  comments      Comment[]
  submissions   Submission[]
}

enum UserRole {
  VISITOR
  TKJ1
  TKJ2
  TKJ3
  INSTRUCTOR
}

model Course {
  id          String             @id @default(cuid())
  name        String
  description String?
  courseCode  String?            @unique // Kode unik untuk join kelas
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     CourseMembership[]
  materials   Material[]
  assignments Assignment[]
  posts       Post[] // Post forum khusus kelas ini
}

// Tabel penghubung User dan Course (Many-to-Many)
model CourseMembership {
  id       String   @id @default(cuid())
  userId   String
  courseId String
  role     UserRole // Peran user di kelas ini
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Pastikan user hanya join sekali per kelas
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String?
  files       Json? // Bisa menyimpan array URL/path file
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  points      Int? // Poin maksimal (opsional)
  files       Json? // File soal/lampiran
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  submittedAt  DateTime   @default(now())
  files        Json? // File jawaban yang diupload
  textContent  String? // Jawaban berupa teks
  grade        Int? // Nilai
  feedback     String? // Feedback dari instruktur
  assignmentId String
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade) // Relasi ke User

  @@unique([assignmentId, studentId]) // Satu siswa hanya bisa submit sekali per tugas
}

model Post {
  id        String    @id @default(cuid())
  title     String? // Judul post forum (opsional)
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courseId  String
  authorId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// Model bawaan NextAuth.js (jika menggunakan Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
